#!/usr/bin/env python

import os
import sys

REPO = "alonid/vim-testbed"
TAG = "10-rust.vim"
IMAGE = f"{REPO}:{TAG}"

class Error(Exception):
    pass

def system(cmd, capture=False, ok_fail=False):
    if capture:
        f = os.popen(cmd)
        return f.read()
    res = os.system(cmd)
    if res != 0:
        if ok_fail:
            return res

        raise Error(f"Error executing: {cmd}")
    return 0

def root():
    return os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

def prep():
    d = os.path.join(root(), "test")
    for i in [".cargo", ".rustup", ".multirust"]:
        l = os.path.join(d, i)
        if not os.path.lexists(l):
            os.symlink(f"/rust/{i}", l)

    l = os.path.join(root(), "test/.vimrc")
    if not os.path.lexists(l):
        os.symlink("vimrc", l)

    if not os.path.exists(os.path.join(d, ".profile")):
        with open(os.path.join(d, ".profile"), "w") as f:
            f.write('export PATH="$HOME/.cargo/bin:$PATH"\n')

def docker_run(cmd, interactive=False, ok_fail=False):
    prep()
    d = root()
    params = f"-v {d}:/testplugin -v {d}/test:/home/vimtest"
    params += " -e HOME=/home/vimtest"
    if not interactive:
        params += " -a stderr"
    params += " -e VADER_OUTPUT_FILE=/dev/stderr"
    params += f" -u {os.getuid()}"
    params += " -w /testplugin"
    interactive_str = "-it" if interactive else ""
    return system(
        f"docker run {interactive_str} --rm {params} {IMAGE} {cmd}",
        ok_fail=ok_fail,
    )

def image_exists():
    r = system(f"docker images -q {IMAGE}", capture=True)
    return len(r.strip().splitlines()) >= 1

def tests_on_docker():
    res = docker_run("bash -lc 'python /home/vimtest/run-tests inside-docker'", ok_fail=True)
    if res == 0:
        print("Tests OK")
    else:
        print("Tests Failed")
        sys.exit(1)

def inside_docker():
    res = system("/vim-build/bin/vim80 --not-a-term '+Vader! test/*.vader'", ok_fail=True)
    if res != 0:
        sys.exit(1)

def run_with_vimrc(vimrc):
    res = system(
        f"vim -u {vimrc} --not-a-term '+Vader! test/*.vader'", ok_fail=True
    )
    if res != 0:
        sys.exit(1)

def main():
    if sys.argv[1:] == ["inside-docker"]:
        inside_docker()
        return

    if sys.argv[1:2] == ["run-with-vimrc"]:
        run_with_vimrc(sys.argv[2])
        return

    if not image_exists():
        print("Need to take image from remote")
        system(f"docker pull {IMAGE}")

    if "-i" in sys.argv[1:]:
        docker_run("bash -l", interactive=True)
        return

    tests_on_docker()

if __name__ == "__main__":
    main()
